{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/javierlopez/Desktop/Projects/hiMate/screens/AddChatScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useLayoutEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Input, Icon, Button, Text } from 'react-native-elements';\nimport { auth, db } from \"../firebase\";\nimport * as ImagePicker from 'expo-image-picker';\n\nvar AddChatScreen = function AddChatScreen(_ref) {\n  var _auth$currentUser2;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      chatname = _useState2[0],\n      setChatname = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chatDescription = _useState4[0],\n      setChatDescription = _useState4[1];\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerTitle: \"CIRCLE\",\n      headerStyle: {\n        backgroundColor: \"#D50000\"\n      },\n      headerTitleStyle: {\n        color: \"white\"\n      },\n      headerTintColor: \"white\",\n      title: \"Add a new chat\",\n      headerBackTitle: \"Cancel\"\n    });\n  }, [navigation]);\n\n  var createChat = function createChat() {\n    var _auth$currentUser;\n\n    return _regeneratorRuntime.async(function createChat$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(db.collection(\"chats\").add({\n              chatName: chatname,\n              chatDescription: chatDescription,\n              chatCreator: auth == null ? void 0 : (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.displayName\n            }).then(function () {\n              navigation.goBack();\n            }).catch(function (e) {\n              return alert(e);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var chooseImage = function chooseImage() {\n    var result;\n    return _regeneratorRuntime.async(function chooseImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync());\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              uploadImage(result.uri, \"test-img\").then(function () {\n                console.log(\"uploadImage(result.uri)\");\n                console.log(uploadImage(result.uri));\n                Alert.alert(\"Image uploaded\");\n              }).catch(function (e) {\n                Alert.alert(e);\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadImage = function uploadImage(uri, imageName) {\n    var response, blob, ref;\n    return _regeneratorRuntime.async(function uploadImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context3.sent;\n            ref = db.storage().ref().child(\"images/\" + imageName);\n            console.log(ref);\n            return _context3.abrupt(\"return\", ref.put(blob));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, React.createElement(Input, {\n    placeholder: \"Circle Name\",\n    value: chatname,\n    onChangeText: function onChangeText(text) {\n      return setChatname(text);\n    },\n    leftIcon: React.createElement(Icon, {\n      name: \"comment\",\n      type: \"font-awesome\",\n      size: 30,\n      color: \"#D50000\",\n      required: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Circle description\",\n    value: chatDescription,\n    onChangeText: function onChangeText(text) {\n      return setChatDescription(text);\n    },\n    leftIcon: React.createElement(Icon, {\n      name: \"comments\",\n      type: \"font-awesome\",\n      size: 30,\n      color: \"#D50000\",\n      required: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }),\n    onSubmitEditing: createChat,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.creator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Created by: \", auth == null ? void 0 : (_auth$currentUser2 = auth.currentUser) == null ? void 0 : _auth$currentUser2.displayName), React.createElement(Button, {\n    style: styles.button,\n    onPress: chooseImage,\n    title: \"Choose image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), React.createElement(Button, {\n    disabled: !chatDescription,\n    style: styles.button,\n    onPress: createChat,\n    title: \"Create Circle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AddChatScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputContainer: {\n    width: 300\n  },\n  button: {\n    width: 200,\n    marginTop: 10\n  },\n  creator: {\n    textAlign: \"center\",\n    color: \"gray\"\n  }\n});","map":{"version":3,"sources":["/Users/javierlopez/Desktop/Projects/hiMate/screens/AddChatScreen.js"],"names":["React","useLayoutEffect","useState","Input","Icon","Button","Text","auth","db","ImagePicker","AddChatScreen","navigation","chatname","setChatname","chatDescription","setChatDescription","setOptions","headerTitle","headerStyle","backgroundColor","headerTitleStyle","color","headerTintColor","title","headerBackTitle","createChat","collection","add","chatName","chatCreator","currentUser","displayName","then","goBack","catch","e","alert","chooseImage","launchCameraAsync","result","cancelled","uploadImage","uri","console","log","Alert","imageName","fetch","response","blob","ref","storage","child","put","styles","container","inputContainer","text","creator","button","StyleSheet","create","flex","padding","alignItems","justifyContent","width","marginTop","textAlign"],"mappings":"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","sourcesContent":["import React, { useLayoutEffect, useState } from 'react'\nimport { StyleSheet, View, Alert } from 'react-native'\nimport { Input, Icon, Button, Text } from 'react-native-elements';\nimport { auth, db } from '../firebase';\nimport * as ImagePicker from 'expo-image-picker';\n\nconst AddChatScreen = ({ navigation }) => {\n  const [chatname, setChatname] = useState(\"\")\n  const [chatDescription, setChatDescription] = useState(\"\")\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerTitle: \"CIRCLE\",\n      headerStyle: { backgroundColor: \"#D50000\" },\n      headerTitleStyle: { color: \"white\" },\n      headerTintColor: \"white\",\n      title: \"Add a new chat\",\n      headerBackTitle: \"Cancel\",\n    });\n  }, [navigation])\n\n  const createChat = async () => {\n    await db.collection(\"chats\").add({ chatName: chatname, chatDescription: chatDescription, chatCreator: auth?.currentUser?.displayName, })\n      .then(() => {\n        navigation.goBack()\n      })\n      .catch((e) => alert(e))\n  }\n\n  const chooseImage = async () => {\n    let result = await ImagePicker.launchCameraAsync();\n    if (!result.cancelled) {\n      uploadImage(result.uri, \"test-img\")\n        .then(() => {\n          console.log(\"uploadImage(result.uri)\")\n          console.log(uploadImage(result.uri))\n          Alert.alert(\"Image uploaded\")\n        })\n        .catch((e) => {\n          Alert.alert(e)\n        })\n    }\n  }\n\n  const uploadImage = async (uri, imageName) => {\n    const response = await fetch(uri)\n    const blob = await response.blob()\n    var ref = db.storage().ref().child(\"images/\" + imageName)\n    console.log(ref)\n    return ref.put(blob)\n  }\n\n  return (\n\n    <View style={styles.container}>\n      <View style={styles.inputContainer}>\n        <Input\n          placeholder=\"Circle Name\"\n          value={chatname}\n          onChangeText={(text) => setChatname(text)}\n          leftIcon={<Icon name=\"comment\" type=\"font-awesome\" size={30} color=\"#D50000\" required />}\n        />\n        <Input\n          placeholder=\"Circle description\"\n          value={chatDescription}\n          onChangeText={(text) => setChatDescription(text)}\n          leftIcon={<Icon name=\"comments\" type=\"font-awesome\" size={30} color=\"#D50000\" required />}\n          onSubmitEditing={createChat}\n        />\n        <Text style={styles.creator}>Created by: {auth?.currentUser?.displayName}</Text>\n        <Button style={styles.button} onPress={chooseImage} title=\"Choose image\" />\n        \n      </View>\n      <Button disabled={!chatDescription} style={styles.button} onPress={createChat} title=\"Create Circle\" />\n    </View>\n  )\n}\n\nexport default AddChatScreen\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputContainer: {\n    width: 300\n  },\n  button: {\n    width: 200,\n    marginTop: 10,\n  },\n  creator: {\n    textAlign: \"center\",\n    color:\"gray\"\n  }\n})\n"]},"metadata":{},"sourceType":"module"}